version: '3.8'

services:
  # YugabyteDB Production Cluster (3-node setup for high availability)
  yb-master-1:
    image: yugabytedb/yugabyte:latest
    container_name: yb_master_1_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_master_1_data:/home/yugabyte/var
    ports:
      - "7000:7000"   # Master UI
      - "7100:7100"   # Master RPC
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-master-1
      --cloud_location=prod.zone-a
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  yb-master-2:
    image: yugabytedb/yugabyte:latest
    container_name: yb_master_2_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_master_2_data:/home/yugabyte/var
    ports:
      - "7001:7000"   # Master UI
      - "7101:7100"   # Master RPC
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-master-2
      --cloud_location=prod.zone-b
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  yb-master-3:
    image: yugabytedb/yugabyte:latest
    container_name: yb_master_3_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_master_3_data:/home/yugabyte/var
    ports:
      - "7002:7000"   # Master UI
      - "7102:7100"   # Master RPC
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-master-3
      --cloud_location=prod.zone-c
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  # YugabyteDB Tablet Server Nodes
  yb-tserver-1:
    image: yugabytedb/yugabyte:latest
    container_name: yb_tserver_1_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_tserver_1_data:/home/yugabyte/var
    ports:
      - "9000:9000"   # TServer UI
      - "9100:9100"   # TServer RPC
      - "5433:5433"   # YSQL (main access point)
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-tserver-1
      --cloud_location=prod.zone-a
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  yb-tserver-2:
    image: yugabytedb/yugabyte:latest
    container_name: yb_tserver_2_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_tserver_2_data:/home/yugabyte/var
    ports:
      - "9001:9000"   # TServer UI
      - "9101:9100"   # TServer RPC
      - "5434:5433"   # YSQL
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-tserver-2
      --cloud_location=prod.zone-b
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  yb-tserver-3:
    image: yugabytedb/yugabyte:latest
    container_name: yb_tserver_3_prod
    restart: unless-stopped
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - yb_tserver_3_data:/home/yugabyte/var
    ports:
      - "9002:9000"   # TServer UI
      - "9102:9100"   # TServer RPC
      - "5435:5433"   # YSQL
    networks:
      - yb_prod_network
    command: >
      /home/yugabyte/bin/yugabyted start
      --base_dir=/home/yugabyte/var
      --advertise_address=yb-tserver-3
      --cloud_location=prod.zone-c
      --fault_tolerance=zone
      --master_addresses=yb-master-1:7100,yb-master-2:7100,yb-master-3:7100
      --tserver_addresses=yb-tserver-1:9100,yb-tserver-2:9100,yb-tserver-3:9100
      --ysql_enable_auth=true
      --ysql_hba_conf_csv="host all yugabyte 0.0.0.0/0 md5,host all yugabyte ::/0 md5"

  # Redis Cluster for Production
  redis-master:
    image: redis:7-alpine
    container_name: haddi_redis_master_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_prod_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    networks:
      - yb_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_prod_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-replica-1:
    image: redis:7-alpine
    container_name: haddi_redis_replica_1_prod
    restart: unless-stopped
    command: redis-server --slaveof redis-master 6379 --requirepass ${REDIS_PASSWORD:-redis_prod_password}
    volumes:
      - redis_replica_1_data:/data
    networks:
      - yb_prod_network
    depends_on:
      - redis-master

  redis-replica-2:
    image: redis:7-alpine
    container_name: haddi_redis_replica_2_prod
    restart: unless-stopped
    command: redis-server --slaveof redis-master 6379 --requirepass ${REDIS_PASSWORD:-redis_prod_password}
    volumes:
      - redis_replica_2_data:/data
    networks:
      - yb_prod_network
    depends_on:
      - redis-master

  # Application (Production)
  app_prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: haddi_app_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4545
      DATABASE_URL: postgresql://haddi_user:${DB_PASSWORD:-haddi_prod_password}@yb-tserver-1:5433/haddi_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_prod_password}@redis-master:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here_change_in_production}
      # Add other production environment variables
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      GMAIL_USER: ${GMAIL_USER}
      GMAIL_PASS: ${GMAIL_PASS}
    ports:
      - "4546:4545"  # Different port for production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      yb-tserver-1:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - yb_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4545/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: haddi_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - app_prod
    networks:
      - yb_prod_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database initialization service
  db-init:
    image: yugabytedb/yugabyte:latest
    container_name: haddi_db_init_prod
    restart: "no"
    environment:
      YSQL_USER: yugabyte
      YSQL_PASSWORD: ${YUGABYTE_PASSWORD:-yugabyte_prod_password}
      YSQL_DB: yugabyte
    volumes:
      - ./init-yb-prod.sql:/docker-entrypoint-initdb.d/init-yb-prod.sql:ro
    networks:
      - yb_prod_network
    depends_on:
      - yb-tserver-1
      - yb-tserver-2
      - yb-tserver-3
    command: >
      sh -c "
        echo 'Waiting for YugabyteDB to be ready...' &&
        sleep 60 &&
        ysqlsh -h yb-tserver-1 -p 5433 -U yugabyte -d yugabyte -f /docker-entrypoint-initdb.d/init-yb-prod.sql &&
        echo 'Database initialization completed'
      "

volumes:
  yb_master_1_data:
    driver: local
  yb_master_2_data:
    driver: local
  yb_master_3_data:
    driver: local
  yb_tserver_1_data:
    driver: local
  yb_tserver_2_data:
    driver: local
  yb_tserver_3_data:
    driver: local
  redis_master_data:
    driver: local
  redis_replica_1_data:
    driver: local
  redis_replica_2_data:
    driver: local

networks:
  yb_prod_network:
    driver: bridge 