version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: haddi_postgres_prod
    environment:
      POSTGRES_DB: haddi_prod
      POSTGRES_USER: haddi_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - haddi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U haddi_user -d haddi_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: haddi_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - haddi_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Haddi Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: haddi_app_prod
    environment:
      NODE_ENV: production
      PORT: 4545
      DATABASE_URL: postgresql://haddi_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/haddi_prod
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-for-production}
      JWT_EXPIRES_IN: 7d
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-ap-south-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-haddi-production-bucket}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://your-frontend-domain.com}
      LOG_LEVEL: info
      BCRYPT_ROUNDS: 12
    ports:
      - "4545:4545"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - haddi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4545/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: haddi_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - haddi_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  haddi_network:
    driver: bridge 