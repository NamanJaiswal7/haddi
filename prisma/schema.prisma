generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  mobile         String?  @unique
  passwordHash   String
  googleId       String?  @unique
  picture        String?
  dob            DateTime?
  gender         Gender?
  institution    InstitutionType?
  classLevel     String?
  school         String?
  districtId     String?
  pincode        String?
  role           Role
  lastActiveAt   DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sentNotifications Notification[] @relation("SenderNotifications")
  receivedNotifications NotificationRecipient[]
  examAttempts    ExamAttempt[]
  studentProgress StudentProgress[]
  events Event[]
  eventRegistrations EventParticipant[]
  videoProgresses VideoProgress[]
  pdfProgresses   PdfProgress[]

  district       District? @relation(fields: [districtId], references: [id])
}

model District {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  notifications Notification[]
  events    Event[]
}

model Course {
  id          String   @id @default(cuid())
  classLevel  String
  level       String
  title       String
  description String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())

  videos      CourseVideo[]
  notes       CourseNote[]
  pdfs        CoursePDF[]
  quizzes     Quiz[]
  studentProgress StudentProgress[]
}

model CourseVideo {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  youtubeId String?
  thumbnail String?
  iframeSnippet String?

  course    Course @relation(fields: [courseId], references: [id])
  videoProgresses VideoProgress[]
}

model CourseNote {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  content   String

  course    Course @relation(fields: [courseId], references: [id])
}

model CoursePDF {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  url       String

  course    Course @relation(fields: [courseId], references: [id])
  pdfProgresses PdfProgress[]
}

model Quiz {
  id             String   @id @default(cuid())
  courseId       String
  classLevel     String
  numQuestions   Int
  passPercentage Float
  questionBankId String

  course         Course @relation(fields: [courseId], references: [id])
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id])
  examAttempts   ExamAttempt[]
}

model QuestionBank {
  id        String   @id @default(cuid())
  questions Question[]
  quizzes   Quiz[]
}

model Question {
  id             String   @id @default(cuid())
  questionBankId String
  question       String
  optionA        String
  optionB        String
  optionC        String
  optionD        String
  correctOption  String

  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id])
}

model ExamAttempt {
  id          String   @id @default(cuid())
  studentId   String
  quizId      String
  startedAt   DateTime
  completedAt DateTime?
  passed      Boolean?
  score       Int?

  student     User @relation(fields: [studentId], references: [id])
  quiz        Quiz @relation(fields: [quizId], references: [id])
  studentProgress StudentProgress[]
}

model StudentProgress {
  id         String   @id @default(cuid())
  studentId  String
  courseId   String
  status     ProgressStatus
  qualified  Boolean?
  attemptId  String?

  student    User @relation(fields: [studentId], references: [id])
  course     Course @relation(fields: [courseId], references: [id])
  attempt    ExamAttempt? @relation(fields: [attemptId], references: [id])

  @@unique([studentId, courseId])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        NotificationType
  senderId    String?
  districtId  String?
  createdAt   DateTime @default(now())

  sender      User? @relation("SenderNotifications", fields: [senderId], references: [id])
  district    District? @relation(fields: [districtId], references: [id])
  recipients  NotificationRecipient[]
}

model NotificationRecipient {
  id             String   @id @default(cuid())
  notificationId String
  userId         String
  isRead         Boolean  @default(false)

  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User @relation(fields: [userId], references: [id])
}

enum Role {
  student
  district_admin
  master_admin
}

enum Gender {
  male
  female
  other
}

enum InstitutionType {
  high_school
  senior_secondary
  college
  working
  other
}

enum ProgressStatus {
  not_started
  in_progress
  completed
}

enum NotificationType {
  event
  message
  pdf
  meeting
  admin_announcement
}

enum EventType {
  festival
  study_circle
  kirtan
  seminar
  workshop
  spiritual
  other
}

model Event {
  id           Int      @id @default(autoincrement())
  title        String
  type         EventType
  description  String   @db.Text
  location     String
  date         DateTime
  creatorId    String
  districtId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  creator      User      @relation(fields: [creatorId], references: [id])
  district     District? @relation(fields: [districtId], references: [id])
  participants EventParticipant[]

  @@index([districtId, date])
}

model EventParticipant {
  eventId      Int
  userId       String
  registeredAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([eventId, userId])
}

model PassingMark {
  id           String   @id @default(cuid())
  classId      String
  levelId      String
  passingMarks Int

  @@unique([classId, levelId])
}

model Otp {
  id        String   @id @default(cuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VideoProgress {
  id        String   @id @default(cuid())
  studentId String
  videoId   String
  watched   Boolean  @default(false)
  watchedAt DateTime?

  student   User        @relation(fields: [studentId], references: [id])
  video     CourseVideo @relation(fields: [videoId], references: [id])

  @@unique([studentId, videoId])
}

model PdfProgress {
  id        String   @id @default(cuid())
  studentId String
  pdfId     String
  read      Boolean  @default(false)
  readAt    DateTime?

  student   User      @relation(fields: [studentId], references: [id])
  pdf       CoursePDF @relation(fields: [pdfId], references: [id])

  @@unique([studentId, pdfId])
}

model CourseLevel {
  id        String   @id @default(cuid())
  classId   String   @unique
  levels    String[] // Array of level strings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
